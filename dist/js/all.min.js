(function() {
  var Ajax, root;

  Ajax = (function() {
    function Ajax() {}

    Ajax.load = function(url, dest, loading) {
      var xhr;
      if (loading == null) {
        loading = 'Cargando…';
      }
      xhr = new XMLHttpRequest();
      if ('string' === typeof obj) {
        dest = document.getElementById(dest);
      }
      xhr.onreadystatechange = function() {
        return dest.innerHTML = xhr.responseText;
      };
      xhr.open('GET', url, true);
      xhr.send('');
      return false;
    };

    Ajax.jsonPost = function(url, parameters, callback) {
      var xhr;
      if (callback == null) {
        callback = null;
      }
      xhr = new XMLHttpRequest();
      xhr.open('POST', url, true);
      xhr.responseType = 'json';
      xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
      xhr.setRequestHeader('Content-length', parameters.length);
      xhr.setRequestHeader('Connection', 'close');
      if (callback) {
        xhr.onreadystatechange = function() {
          if (xhr.readyState === 4 && xhr.status === 200) {
            return callback(xhr);
          }
        };
      }
      xhr.send(parameters);
      return xhr;
    };

    Ajax.getCb = function(url, cb) {
      var xhr;
      xhr = new XMLHttpRequest();
      xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
          return cb(xhr);
        }
      };
      xhr.open('GET', url, true);
      xhr.send('');
      return xhr;
    };

    return Ajax;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Ajax = Ajax;

}).call(this);

(function() {
  var Caruso, root;

  Caruso = (function() {
    Caruso.prototype.movement = 'auto';

    Caruso.prototype.flagAjaxFree = true;

    Caruso.prototype.moreItemsUrl = 'xhr-html.html?' + Math.random();

    Caruso.prototype.moreItemsCallback = function() {
      return this.moreItemsUrl = 'xhr-html.html?' + Math.random();
    };

    function Caruso(elem1) {
      var container, elem, left, right, scrollable, selff, thiss;
      this.elem = elem1;
      elem = this.elem;
      if (this.movement === 'auto') {
        this.movement = elem.querySelectorAll('.item')[0].offsetWidth;
      }
      left = elem.querySelectorAll('.left');
      right = elem.querySelectorAll('.right');
      scrollable = elem.querySelectorAll('.viewport');
      container = elem.querySelectorAll('.horizontal');
      thiss = this;
      selff = this.constructor;
      window.onresize = function() {
        return thiss.fixLengths();
      };
      if (scrollable.length) {
        scrollable[0].addEventListener('scroll', function(e) {
          var scroll;
          scroll = scrollable[0].scrollLeft;
          if (scrollable[0].scrollLeft + scrollable[0].offsetWidth >= container[0].offsetWidth - 100) {
            thiss.moreItems();
          }
          if (scroll <= 0) {
            scroll = 0;
            selff.hide(left[0]);
          } else {
            selff.show(left[0]);
          }
          if ((scrollable[0].scrollLeft + scrollable[0].offsetWidth) >= container[0].offsetWidth) {
            return selff.hide(right[0]);
          } else {
            return selff.show(right[0]);
          }
        });
        if (left.length) {
          left[0].addEventListener('click', function(e) {
            var scroll;
            e.preventDefault();
            e.stopPropagation();
            if (left[0].disabled) {
              return false;
            }
            scroll = scrollable[0].scrollLeft - thiss.movement;
            scrollable[0].scrollLeft = scroll;
            return thiss.show(right[0]);
          });
        }
        if (right.length) {
          right[0].addEventListener('click', function(e) {
            var scroll;
            e.preventDefault();
            e.stopPropagation();
            if (right[0].disabled) {
              return false;
            }
            scroll = scrollable[0].scrollLeft + thiss.movement;
            return scrollable[0].scrollLeft = scroll;
          });
        }
      }
    }

    Caruso.prototype.moreItems = function() {
      var container, elem, right, selff, thiss;
      if (this.moreItemsUrl === '') {
        return false;
      }
      elem = this.elem;
      right = elem.querySelectorAll('.right');
      container = elem.querySelectorAll('.horizontal');
      thiss = this;
      selff = this.constructor;
      if (container.length) {
        if (this.flagAjaxFree) {
          this.flagAjaxFree = false;
          selff.loading(right[0].children[0]);
          return Ajax.getCb(this.moreItemsUrl, function(xhr) {
            if (xhr.response !== '') {
              container[0].innerHTML += xhr.response;
              thiss.fixLengths();
              selff.loading(right[0].children[0], false);
              selff.show(right[0]);
              if (thiss.moreItemsCallback) {
                thiss.moreItemsCallback(xhr);
              }
              thiss.flagAjaxFree = true;
              return true;
            } else {
              return false;
            }
          });
        }
      }
    };

    Caruso.prototype.fixLengths = function() {
      var container, count, elem, elems, i, item, itemsPerPage, len, margin, results, screenW, totalW, w;
      elem = this.elem;
      container = elem.querySelectorAll('.horizontal');
      elems = elem.querySelectorAll('.item');
      count = elems.length;
      if (container.length && count) {
        screenW = document.documentElement.clientWidth;
        if (screenW >= 768) {
          itemsPerPage = 5;
        } else if (screenW >= 480) {
          itemsPerPage = 4;
        } else {
          itemsPerPage = 3;
        }
        w = 100 / count;
        margin = 6 / count;
        totalW = 100 * count / itemsPerPage;
        container[0].style.width = totalW + "%";
        results = [];
        for (i = 0, len = elems.length; i < len; i++) {
          item = elems[i];
          this.constructor.show(item);
          results.push(item.style.width = w + "%");
        }
        return results;
      }
    };

    Caruso.show = function(elem) {
      elem.className = elem.className.replace(/(?:^|\s)disabled(?!\S)/g, '');
      return elem.disabled = false;
    };

    Caruso.hide = function(elem) {
      elem.disabled = true;
      return elem.className += " disabled";
    };

    Caruso.loading = function(elem, state) {
      if (state == null) {
        state = true;
      }
      if (state) {
        return elem.innerHTML = '…';
      } else {
        return elem.innerHTML = '»';
      }
    };

    return Caruso;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Caruso = Caruso;

}).call(this);

(function() {
  document.addEventListener('DOMContentLoaded', function(event) {
    var caruso, gal, i, len, ref;
    ref = document.querySelectorAll('.caruso');
    for (i = 0, len = ref.length; i < len; i++) {
      gal = ref[i];
      caruso = new Caruso(gal);
      caruso.moreItemsUrl = 'xhr-html.html?zzzz=' + Math.random();
      caruso.moreItemsCallback = function() {
        return this.moreItemsUrl = 'xhr-html.html?asdf=' + Math.random();
      };
    }
    return true;
  });

}).call(this);

//# sourceMappingURL=../maps/all.min.js.map